import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/.svelte-kit/generated/root.svelte");/* C:/nithinprojects/AppTimeTracker/.svelte-kit/generated/root.svelte generated by Svelte v4.2.18 */
import {
	SvelteComponentDev,
	add_location,
	attr_dev,
	binding_callbacks,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	construct_svelte_component_dev,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	group_outros,
	init,
	insert_hydration_dev,
	mount_component,
	safe_not_equal,
	set_data_dev,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "/node_modules/.vite/deps/svelte_internal.js?v=28100ade";

import "/node_modules/.vite/deps/svelte_internal_disclose-version.js?v=28100ade";
import { setContext, afterUpdate, onMount, tick } from "/node_modules/.vite/deps/svelte.js?v=28100ade";
import { browser } from "/node_modules/@sveltejs/kit/src/runtime/app/environment/index.js?v=28100ade";
const file = "C:/nithinprojects/AppTimeTracker/.svelte-kit/generated/root.svelte";

// (47:0) {:else}
function create_else_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*constructors*/ ctx[1][0];

	function switch_props(ctx, dirty) {
		let switch_instance_props = {
			data: /*data_0*/ ctx[3],
			form: /*form*/ ctx[2]
		};

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		/*switch_instance_binding_2*/ ctx[12](switch_instance);
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_hydration_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*constructors*/ 2 && switch_value !== (switch_value = /*constructors*/ ctx[1][0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
					/*switch_instance_binding_2*/ ctx[12](switch_instance);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				const switch_instance_changes = {};
				if (dirty & /*data_0*/ 8) switch_instance_changes.data = /*data_0*/ ctx[3];
				if (dirty & /*form*/ 4) switch_instance_changes.form = /*form*/ ctx[2];
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			/*switch_instance_binding_2*/ ctx[12](null);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(47:0) {:else}",
		ctx
	});

	return block;
}

// (43:0) {#if constructors[1]}
function create_if_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*constructors*/ ctx[1][0];

	function switch_props(ctx, dirty) {
		let switch_instance_props = {
			data: /*data_0*/ ctx[3],
			$$slots: { default: [create_default_slot] },
			$$scope: { ctx }
		};

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		/*switch_instance_binding_1*/ ctx[11](switch_instance);
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_hydration_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*constructors*/ 2 && switch_value !== (switch_value = /*constructors*/ ctx[1][0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
					/*switch_instance_binding_1*/ ctx[11](switch_instance);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				const switch_instance_changes = {};
				if (dirty & /*data_0*/ 8) switch_instance_changes.data = /*data_0*/ ctx[3];

				if (dirty & /*$$scope, constructors, data_1, form, components*/ 8215) {
					switch_instance_changes.$$scope = { dirty, ctx };
				}

				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			/*switch_instance_binding_1*/ ctx[11](null);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(43:0) {#if constructors[1]}",
		ctx
	});

	return block;
}

// (44:1) <svelte:component this={constructors[0]} bind:this={components[0]} data={data_0}>
function create_default_slot(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*constructors*/ ctx[1][1];

	function switch_props(ctx, dirty) {
		let switch_instance_props = {
			data: /*data_1*/ ctx[4],
			form: /*form*/ ctx[2]
		};

		return {
			props: switch_instance_props,
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		/*switch_instance_binding*/ ctx[10](switch_instance);
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert_hydration_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*constructors*/ 2 && switch_value !== (switch_value = /*constructors*/ ctx[1][1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
					/*switch_instance_binding*/ ctx[10](switch_instance);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				const switch_instance_changes = {};
				if (dirty & /*data_1*/ 16) switch_instance_changes.data = /*data_1*/ ctx[4];
				if (dirty & /*form*/ 4) switch_instance_changes.form = /*form*/ ctx[2];
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(switch_instance_anchor);
			}

			/*switch_instance_binding*/ ctx[10](null);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(44:1) <svelte:component this={constructors[0]} bind:this={components[0]} data={data_0}>",
		ctx
	});

	return block;
}

// (51:0) {#if mounted}
function create_if_block(ctx) {
	let div;
	let if_block = /*navigated*/ ctx[6] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {
				id: true,
				"aria-live": true,
				"aria-atomic": true,
				style: true
			});

			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "svelte-announcer");
			attr_dev(div, "aria-live", "assertive");
			attr_dev(div, "aria-atomic", "true");
			set_style(div, "position", "absolute");
			set_style(div, "left", "0");
			set_style(div, "top", "0");
			set_style(div, "clip", "rect(0 0 0 0)");
			set_style(div, "clip-path", "inset(50%)");
			set_style(div, "overflow", "hidden");
			set_style(div, "white-space", "nowrap");
			set_style(div, "width", "1px");
			set_style(div, "height", "1px");
			add_location(div, file, 51, 1, 1151);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (/*navigated*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(div);
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(51:0) {#if mounted}",
		ctx
	});

	return block;
}

// (53:2) {#if navigated}
function create_if_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*title*/ ctx[7]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*title*/ ctx[7]);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 128) set_data_dev(t, /*title*/ ctx[7]);
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(53:2) {#if navigated}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block0;
	let t;
	let if_block1_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*constructors*/ ctx[1][1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*mounted*/ ctx[5] && create_if_block(ctx);

	const block = {
		c: function create() {
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		l: function claim(nodes) {
			if_block0.l(nodes);
			t = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_hydration_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_hydration_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(t.parentNode, t);
			}

			if (/*mounted*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
				detach_dev(if_block1_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Root', slots, []);
	let { stores } = $$props;
	let { page } = $$props;
	let { constructors } = $$props;
	let { components = [] } = $$props;
	let { form } = $$props;
	let { data_0 = null } = $$props;
	let { data_1 = null } = $$props;

	if (!browser) {
		setContext('__svelte__', stores);
	}

	afterUpdate(stores.page.notify);
	let mounted = false;
	let navigated = false;
	let title = null;

	onMount(() => {
		const unsubscribe = stores.page.subscribe(() => {
			if (mounted) {
				$$invalidate(6, navigated = true);

				tick().then(() => {
					$$invalidate(7, title = document.title || 'untitled page');
				});
			}
		});

		$$invalidate(5, mounted = true);
		return unsubscribe;
	});

	$$self.$$.on_mount.push(function () {
		if (stores === undefined && !('stores' in $$props || $$self.$$.bound[$$self.$$.props['stores']])) {
			console.warn("<Root> was created without expected prop 'stores'");
		}

		if (page === undefined && !('page' in $$props || $$self.$$.bound[$$self.$$.props['page']])) {
			console.warn("<Root> was created without expected prop 'page'");
		}

		if (constructors === undefined && !('constructors' in $$props || $$self.$$.bound[$$self.$$.props['constructors']])) {
			console.warn("<Root> was created without expected prop 'constructors'");
		}

		if (form === undefined && !('form' in $$props || $$self.$$.bound[$$self.$$.props['form']])) {
			console.warn("<Root> was created without expected prop 'form'");
		}
	});

	const writable_props = ['stores', 'page', 'constructors', 'components', 'form', 'data_0', 'data_1'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Root> was created with unknown prop '${key}'`);
	});

	function switch_instance_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			components[1] = $$value;
			$$invalidate(0, components);
		});
	}

	function switch_instance_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			components[0] = $$value;
			$$invalidate(0, components);
		});
	}

	function switch_instance_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			components[0] = $$value;
			$$invalidate(0, components);
		});
	}

	$$self.$$set = $$props => {
		if ('stores' in $$props) $$invalidate(8, stores = $$props.stores);
		if ('page' in $$props) $$invalidate(9, page = $$props.page);
		if ('constructors' in $$props) $$invalidate(1, constructors = $$props.constructors);
		if ('components' in $$props) $$invalidate(0, components = $$props.components);
		if ('form' in $$props) $$invalidate(2, form = $$props.form);
		if ('data_0' in $$props) $$invalidate(3, data_0 = $$props.data_0);
		if ('data_1' in $$props) $$invalidate(4, data_1 = $$props.data_1);
	};

	$$self.$capture_state = () => ({
		setContext,
		afterUpdate,
		onMount,
		tick,
		browser,
		stores,
		page,
		constructors,
		components,
		form,
		data_0,
		data_1,
		mounted,
		navigated,
		title
	});

	$$self.$inject_state = $$props => {
		if ('stores' in $$props) $$invalidate(8, stores = $$props.stores);
		if ('page' in $$props) $$invalidate(9, page = $$props.page);
		if ('constructors' in $$props) $$invalidate(1, constructors = $$props.constructors);
		if ('components' in $$props) $$invalidate(0, components = $$props.components);
		if ('form' in $$props) $$invalidate(2, form = $$props.form);
		if ('data_0' in $$props) $$invalidate(3, data_0 = $$props.data_0);
		if ('data_1' in $$props) $$invalidate(4, data_1 = $$props.data_1);
		if ('mounted' in $$props) $$invalidate(5, mounted = $$props.mounted);
		if ('navigated' in $$props) $$invalidate(6, navigated = $$props.navigated);
		if ('title' in $$props) $$invalidate(7, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*stores, page*/ 768) {
			$: stores.page.set(page);
		}
	};

	return [
		components,
		constructors,
		form,
		data_0,
		data_1,
		mounted,
		navigated,
		title,
		stores,
		page,
		switch_instance_binding,
		switch_instance_binding_1,
		switch_instance_binding_2
	];
}

class Root extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			stores: 8,
			page: 9,
			constructors: 1,
			components: 0,
			form: 2,
			data_0: 3,
			data_1: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Root",
			options,
			id: create_fragment.name
		});
	}

	get stores() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stores(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get page() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get constructors() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set constructors(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get components() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set components(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_0() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_0(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data_1() {
		throw new Error("<Root>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data_1(value) {
		throw new Error("<Root>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

import * as ___SVELTE_HMR_HOT_API from "/node_modules/svelte-hmr/runtime/hot-api-esm.js?v=28100ade";import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from "/node_modules/svelte-hmr/runtime/proxy-adapter-dom.js?v=28100ade";if (import.meta && import.meta.hot) { if (false) import.meta.hot.acceptExports(['default']);; Root = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "C:/nithinprojects/AppTimeTracker/.svelte-kit/generated/root.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":false,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":false,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":true,"allowLiveBinding":false,"partialAccept":true}, Component: Root, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }
export default Root;


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUdVLFVBQVUsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksUUFBUSxRQUFRO1NBQ3RELE9BQU8sUUFBUSxrQkFBa0I7Ozs7Ozs7O3FDQTJDbEIsR0FBWSxJQUFDLENBQUM7Ozs7b0JBQW1DLEdBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RkFBdkQsR0FBWSxJQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dFQUFtQyxHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQUp2RCxHQUFZLElBQUMsQ0FBQzs7OztvQkFBbUMsR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RkFBdkQsR0FBWSxJQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dFQUFtQyxHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0FDdEQsR0FBWSxJQUFDLENBQUM7Ozs7b0JBQW1DLEdBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1RkFBdkQsR0FBWSxJQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lFQUFtQyxHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFRMUUsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQURmLG9CQUlLOzs7O3FCQUhDLEdBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkFDWixHQUFLOzs7bUNBQUwsR0FBSzs7Ozs7O3dEQUFMLEdBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1QkFYSixHQUFZLElBQUMsQ0FBQzs7Ozs7OzZCQVFkLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBQVAsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EzQ0EsTUFBTTtPQUNOLElBQUk7T0FFSixZQUFZO09BQ1osVUFBVTtPQUNWLElBQUk7T0FDSixNQUFNLEdBQUcsSUFBSTtPQUNiLE1BQU0sR0FBRyxJQUFJOztNQUVuQixPQUFPO0VBQ1gsVUFBVSxDQUFDLFlBQVksRUFBRSxNQUFNOzs7Q0FJaEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTTtLQUUxQixPQUFPLEdBQUcsS0FBSztLQUNmLFNBQVMsR0FBRyxLQUFLO0tBQ2pCLEtBQUssR0FBRyxJQUFJOztDQUVoQixPQUFPO1FBQ0EsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUztPQUNwQyxPQUFPO29CQUNWLFNBQVMsR0FBRyxJQUFJOztJQUNoQixJQUFJLEdBQUcsSUFBSTtxQkFDVixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssSUFBSSxlQUFlOzs7OztrQkFLNUMsT0FBTyxHQUFHLElBQUk7U0FDUCxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQU1rQyxVQUFVLENBQUMsQ0FBQzs7Ozs7OztHQURiLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7O0dBSVosVUFBVSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EzQmhFLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJIiwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJyb290LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8IS0tIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgQHN2ZWx0ZWpzL2tpdCDigJQgZG8gbm90IGVkaXQgaXQhIC0tPlxuXG48c2NyaXB0PlxuXHRpbXBvcnQgeyBzZXRDb250ZXh0LCBhZnRlclVwZGF0ZSwgb25Nb3VudCwgdGljayB9IGZyb20gJ3N2ZWx0ZSc7XG5cdGltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICckYXBwL2Vudmlyb25tZW50JztcblxuXHQvLyBzdG9yZXNcblx0ZXhwb3J0IGxldCBzdG9yZXM7XG5cdGV4cG9ydCBsZXQgcGFnZTtcblx0XG5cdGV4cG9ydCBsZXQgY29uc3RydWN0b3JzO1xuXHRleHBvcnQgbGV0IGNvbXBvbmVudHMgPSBbXTtcblx0ZXhwb3J0IGxldCBmb3JtO1xuXHRleHBvcnQgbGV0IGRhdGFfMCA9IG51bGw7XG5cdGV4cG9ydCBsZXQgZGF0YV8xID0gbnVsbDtcblxuXHRpZiAoIWJyb3dzZXIpIHtcblx0XHRzZXRDb250ZXh0KCdfX3N2ZWx0ZV9fJywgc3RvcmVzKTtcblx0fVxuXG5cdCQ6IHN0b3Jlcy5wYWdlLnNldChwYWdlKTtcblx0YWZ0ZXJVcGRhdGUoc3RvcmVzLnBhZ2Uubm90aWZ5KTtcblxuXHRsZXQgbW91bnRlZCA9IGZhbHNlO1xuXHRsZXQgbmF2aWdhdGVkID0gZmFsc2U7XG5cdGxldCB0aXRsZSA9IG51bGw7XG5cblx0b25Nb3VudCgoKSA9PiB7XG5cdFx0Y29uc3QgdW5zdWJzY3JpYmUgPSBzdG9yZXMucGFnZS5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0aWYgKG1vdW50ZWQpIHtcblx0XHRcdFx0bmF2aWdhdGVkID0gdHJ1ZTtcblx0XHRcdFx0dGljaygpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdHRpdGxlID0gZG9jdW1lbnQudGl0bGUgfHwgJ3VudGl0bGVkIHBhZ2UnO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG1vdW50ZWQgPSB0cnVlO1xuXHRcdHJldHVybiB1bnN1YnNjcmliZTtcblx0fSk7XG48L3NjcmlwdD5cblxueyNpZiBjb25zdHJ1Y3RvcnNbMV19XG5cdDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e2NvbnN0cnVjdG9yc1swXX0gYmluZDp0aGlzPXtjb21wb25lbnRzWzBdfSBkYXRhPXtkYXRhXzB9PlxuXHRcdDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e2NvbnN0cnVjdG9yc1sxXX0gYmluZDp0aGlzPXtjb21wb25lbnRzWzFdfSBkYXRhPXtkYXRhXzF9IHtmb3JtfSAvPlxuXHQ8L3N2ZWx0ZTpjb21wb25lbnQ+XG57OmVsc2V9XG5cdDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e2NvbnN0cnVjdG9yc1swXX0gYmluZDp0aGlzPXtjb21wb25lbnRzWzBdfSBkYXRhPXtkYXRhXzB9IHtmb3JtfSAvPlxuey9pZn1cblxueyNpZiBtb3VudGVkfVxuXHQ8ZGl2IGlkPVwic3ZlbHRlLWFubm91bmNlclwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAwOyB0b3A6IDA7IGNsaXA6IHJlY3QoMCAwIDAgMCk7IGNsaXAtcGF0aDogaW5zZXQoNTAlKTsgb3ZlcmZsb3c6IGhpZGRlbjsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgd2lkdGg6IDFweDsgaGVpZ2h0OiAxcHhcIj5cblx0XHR7I2lmIG5hdmlnYXRlZH1cblx0XHRcdHt0aXRsZX1cblx0XHR7L2lmfVxuXHQ8L2Rpdj5cbnsvaWZ9Il0sInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswXX0=